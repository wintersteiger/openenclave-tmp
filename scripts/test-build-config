# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.

#!/bin/bash

##====================================================================================
##
## This script fires OE build and test for specified build-type, platform and
## simulator/hardware mode.
## Default run with no parameters builds with Debug build-type and for SGX1
## platform and will test in Simulator mode.
## Run this from the root of the source tree as sudo.
## Please note that this script does not install any packages needed for build/test.
## Please install all packages necessary for your test before invoking this script.
## For CI runs, the Docker image will contain the necessary packages.
##
##====================================================================================
if [ "$1" == "-h" -o "$1" == "--help" ]; then
   echo "Script to fire OE build and test with specified platform/build-type/test mode" 
   echo " Usage: "
   echo " ./scripts/test-build-config"
   echo "        -d or --disable_sim to Disable Simulator Test Mode"
   echo "        -p SGX1FLC or -p=SGX1FLC to build for SGX1FLC platform"
   echo "        -b Debug|RelWithDebInfo|Release or -b=Debug|RelWithDebInfo|Release"
   echo "        -h or --help to Display usage and exit"
   echo "        --compiler=[clang-7,gcc] to build with a specified compiler"
   echo "        --build_package to Build a .deb package after testing"
   echo "        --enable_full_libcxx_tests to Enable libcxx tests"
   echo "        --enable_full_libc_tests to Enable libc tests"
   echo " Default is to build for SGX1 platform, Debug Build type & test in"
   echo " simulator mode"
   echo ""
   exit 0
fi

#Default values for the arguments
#Disable Simulator test mode to run on SGX hardware. 
#Default test mode is Simulator, disable Simulator test mode with -d or --disable_sim 
DISABLE_SIM=0
#Valid PLATFORM_MODE values are SGX1 or SGX1FLC
PLATFORM_MODE="SGX1"
#Valid BUILDTYPE values are Debug|Release|RelWithDebInfo
BUILD_TYPE="DEBUG"
#Build a package. Default is disabled
BUILD_PACKAGE=0
OE_INSTALL_DIR="/opt/openenclave"
#Flag for enabling full libc tests.
ENABLE_FULL_LIBC_TESTS=0
#Flag for enabling full libcxx tests.
ENABLE_FULL_LIBCXX_TESTS=0
#Flag to build with clang instead of gcc
COMPILER_VALUE="gcc"

#Parse the command line - keep looping as long as there is at least one more argument
while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
        # This is a flag type option. Will catch either -d or --disable_sim
        -d|--disable_sim)
        DISABLE_SIM=1
        ;;
        # This is a flag type option. Will catch --build_package
        --build_package)
        BUILD_PACKAGE=1
        ;;
        # This is an arg value type option. Will catch -p value or --platform_mode value
        -p|--platform_mode)
        shift # past the key and to the value
        PLATFORM_MODE="$1"
        ;;
        # This is an arg=value type option. Will catch -p=value or --platform_mode=value
        -p=*|--platform_mode=*)
        # No need to shift here since the value is part of the same string
        PLATFORM_MODE="${key#*=}"
        ;;
        # This is an arg value type option. Will catch -b value or --build_type value
        -b|--build_type)
        shift # past the key and to the value
        BUILD_TYPE="$1"
        ;;
        --compiler=*)
        COMPILER_VALUE="${key#*=}"
        ;;
        # This is an arg=value type option. Will catch -b=value or --build_type=value
        -b=*|--build_type=*)
        # No need to shift here since the value is part of the same string
        BUILD_TYPE="${key#*=}"
        ;;
        --enable_full_libcxx_tests)
        ENABLE_FULL_LIBCXX_TESTS=1
        ;;
        --enable_full_libc_tests)
        ENABLE_FULL_LIBC_TESTS=1
        ;;
        *)
        echo "Unknown option '$key'"
        exit 1
        ;;
    esac
    # Shift after checking all the cases to get the next option
    shift
done

echo "DISABLE SIMULATOR MODE = ${DISABLE_SIM}"
PLATFORM_MODE=`echo $PLATFORM_MODE|tr '[a-z]' '[A-Z]'`
echo "PLATFORM MODE  = ${PLATFORM_MODE}"
BUILD_TYPE=`echo $BUILD_TYPE|tr '[a-z]' '[A-Z]'`
echo "BUILD_TYPE  = ${BUILD_TYPE}"

#Check if the parameter values are correct
if [[ ${PLATFORM_MODE} != "SGX1" && ${PLATFORM_MODE} != "SGX1FLC" ]]; then
   echo "Invalid value for ${PLATFORM_MODE} "
   exit 1
fi

if [[ ${BUILD_TYPE} != "DEBUG" && ${BUILD_TYPE} != "RELEASE" && ${BUILD_TYPE} != "RELWITHDEBINFO" ]]; then
   echo "Invalid value for ${BUILD_TYPE} "
   exit 1
fi

#Delete the build directory if it exists. This allows calling this script iteratively
#for multiple configurations for a platform.
if [ -d "./build" ]; then
  rm -rf ./build
fi

mkdir build
cd build


CMAKE_FLAGS="-DCMAKE_BUILD_TYPE=${BUILD_TYPE}"
if [ ${PLATFORM_MODE} == "SGX1FLC" ]; then
    CMAKE_FLAGS="${CMAKE_FLAGS} -DUSE_LIBSGX=1"
fi
if [ ${BUILD_PACKAGE} = 1 ]; then
    CMAKE_FLAGS="${CMAKE_FLAGS} -DCMAKE_INSTALL_PREFIX:PATH=${OE_INSTALL_DIR} -DCPACK_GENERATOR=DEB"
fi
if [ ${ENABLE_FULL_LIBCXX_TESTS} = 1 ]; then
    CMAKE_FLAGS="${CMAKE_FLAGS} -DENABLE_FULL_LIBCXX_TESTS=1"
fi
if [ ${ENABLE_FULL_LIBC_TESTS} = 1 ]; then
    CMAKE_FLAGS="${CMAKE_FLAGS} -DENABLE_FULL_LIBC_TESTS=1"
fi

# Jenkins variables below. If unset for a dev build, they default to null/0.
if [ -n "${GIT_COMMIT}" ]; then
    CMAKE_FLAGS="${CMAKE_FLAGS} -DGIT_COMMIT=${GIT_COMMIT}"
fi
if [ -n "${GIT_BRANCH}" ]; then
    CMAKE_FLAGS="${CMAKE_FLAGS} -DGIT_BRANCH=${GIT_BRANCH}"
fi
if [ -n "${BUILD_NUMBER}" ]; then
    CMAKE_FLAGS="${CMAKE_FLAGS} -DBUILD_NUMBER=${BUILD_NUMBER}"
fi

echo "CMAKE_FLAGS are ${CMAKE_FLAGS}"

if [ "$COMPILER_VALUE" = "gcc" ]; then
    export CC="gcc"
    export CXX="g++"
elif [ "$COMPILER_VALUE" = "clang-7" ]; then
    export CC="clang-7"
    export CXX="clang++-7"
fi

cmake .. ${CMAKE_FLAGS}
if [ "$?" != "0" ]; then
    echo ""
    echo "cmake failed for ${PLATFORM_MODE}"
    echo ""
    exit 1
fi

make
if [ "$?" != "0" ]; then
    echo ""
    echo "Build failed for ${PLATFORM_MODE}"
    echo ""
    exit 1
fi

#Finally run the tests in Simulator mode or on Hardware
if [ ${DISABLE_SIM} != 1 ]; then
   SIMULATION_MODE_TEXT="simulation"
   OE_SIMULATION=1 ctest --output-on-failure
else
   SIMULATION_MODE_TEXT="hardware"
   ctest --output-on-failure
fi

if [ "$?" != "0" ]; then
    echo ""
    echo "Test failed for ${PLATFORM_MODE} ${BUILD_TYPE} in ${SIMULATION_MODE_TEXT} mode"
    echo ""
    exit 1
fi

if [ ${BUILD_PACKAGE} = 1 ]; then
    echo "Building package"
    echo ""
    make package
fi
